Functions to make

AddPrivateKey(path string,passphrase string) {

    if any key exists with same fingerprint
        return "Already Exists"

    add this private key
    return "Done"

}

AddPublicKey(path string){

    if any key exists with same fingerprint
        return "Already Exists"

    add this public key
    return "Done"
}

type Entity struct {
    Identities  []Identity
    Fingerprint string
    Algorithm   string
}

type Identity struct {
    Name    string
    Comment string
    Email   string
}

GetKeyList(keytype string) {

    keytype: private
        fetch all private keys
    keytype: public
        fetch all public keys

    store them in []Entity
    return it
}


GetKeyListEmail(email, keytype string){
    GetKeyList(keytype)
    filter them for email
    return them in []Entity
}

AddAccount(email string, fingerprint string){

    if email already exists
        return "Already Exists"

    add to accounts table
}

EditAccount(email string, fingerprint string) {
    set this fingerprint in email account
    // fingerprint can be "" (none selected)
    return "Done"
}

DeleteKey(fingerprint string, keytype string) {

    if keytype == public
        delete it from key table
        return "Done"

    // key is of private type
    used := check if this key is used in any email account

    if used {
        email := fetch first account using this fingerprint
        return "this key is being used by "+ email
    } else {
        delete this private key
        return "Done"
    }
}

DecryptText(email string, text string) {

    fetch the private key  corresponding to the fingerprint used by this account

    plain,err := decrypt text
    if err != nil
        return "Error"

    return plain
}

EncryptText(sender string, reciever []string, text string) {

    recieverEntity[] (official)

    for r := range reciever {
        fetch first public key containing r (email id)
        fill entity array
    }

    fetch fingerprint used by sender email
    fetch his private key
    prepare senderEntity (official)

    encrypt the text

    return the text
}
